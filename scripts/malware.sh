#!/bin/bash

# Define colors
CYAN='\033[0;36m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
MAGENTA='\033[0;35m'
WHITE='\033[1;37m'
BLUE='\033[1;34m'
RED='\033[1;31m'
RESET='\033[0m'

# Clear the screen
clear

# Print the banner
echo -e "${CYAN}${RESET}   ${GREEN}88b           d88                 88b           d88                          88${CYAN}"
echo -e "${CYAN}${RESET}   ${GREEN}888b         d888                 888b         d888                          88${CYAN}"
echo -e "${CYAN}${RESET}   ${GREEN}88\`8b       d8'88                 88\`8b       d8'88                          88${CYAN}"
echo -e "${CYAN}${RESET}   ${GREEN}88 \`8b     d8' 88  8b,dPPYba,     88 \`8b     d8' 88  ,adPPYYba,  8b,dPPYba,  88   ,d8${CYAN}"
echo -e "${CYAN}${RESET}   ${GREEN}88  \`8b   d8'  88  88P'   \"Y8     88  \`8b   d8'  88  \"\"     \`Y8  88P'   \"Y8  88 ,a8\"${CYAN}"
echo -e "${CYAN}${RESET}   ${GREEN}88   \`8b d8'   88  88             88   \`8b d8'   88  ,adPPPPP88  88          8888[${CYAN}"
echo -e "${CYAN}${RESET}   ${GREEN}88    \`888'    88  88             88    \`888'    88  88,    ,88  88          88\`\"Yba,${CYAN}"
echo -e "${CYAN}${RESET}   ${GREEN}88     \`8'     88  88             88     \`8'     88  \"8bbdP\"Y8  88          88   \`Y8a${CYAN}"

# Add some spacing
echo -e "\n"

# Display skills using icons and styles
echo -e "${YELLOW}---------------------------------------------------------------------------------------------------------------------"
echo -e "${WHITE}| ${BLUE}üë®‚Äçüíª ${MAGENTA}ETHICAL HACKER ${WHITE} | ${GREEN}‚öîÔ∏è Network Security ${WHITE}| ${GREEN}üõ°Ô∏è Penetration Testing ${WHITE}|"
echo -e "${YELLOW}---------------------------------------------------------------------------------------------------------------------"
echo -e "${RESET}Proficient in network security, penetration testing, and vulnerability assessment."

echo -e "\n${YELLOW}---------------------------------------------------------------------------------------------------------------------"
echo -e "${WHITE}| ${BLUE}üìä ${MAGENTA}MACHINE LEARNING ${WHITE} | ${GREEN}üß† AI Models ${WHITE}| ${GREEN}üìâ Data Analytics ${WHITE}|"
echo -e "${YELLOW}---------------------------------------------------------------------------------------------------------------------"
echo -e "${RESET}Expert in building and training models using frameworks like TensorFlow, Keras, and PyTorch."

echo -e "\n${YELLOW}---------------------------------------------------------------------------------------------------------------------"
echo -e "${WHITE}| ${BLUE}ü§ñ ${MAGENTA}DEEP LEARNING ${WHITE} | ${GREEN}üîç Image Recognition ${WHITE}| ${GREEN}üìà Predictive Analytics ${WHITE}|"
echo -e "${YELLOW}---------------------------------------------------------------------------------------------------------------------"
echo -e "${RESET}Specialized in deep learning techniques for image recognition and predictive analytics."

echo -e "\n${YELLOW}---------------------------------------------------------------------------------------------------------------------"
echo -e "${WHITE}| ${BLUE}üåê ${MAGENTA}FULL STACK DEV ${WHITE} | ${GREEN}üíª Laravel ${WHITE}| ${GREEN}üåê Django ${WHITE}| ${GREEN}üîß PHP ${WHITE}|"
echo -e "${YELLOW}---------------------------------------------------------------------------------------------------------------------"
echo -e "${RESET}Skilled in developing web applications using Laravel, Django, and PHP frameworks."

# Add some spacing
echo -e "\n"

# Print end of banner
echo -e "${CYAN}################################################################################"
echo -e "#                                                                              #"
echo -e "#${RESET}                      ${RED}THANK YOU FOR VISITING MY PROFILE!                      ${CYAN}#"
echo -e "#                                                                              #"
echo -e "${CYAN}################################################################################${RESET}"

# Define the URL of the Django CSRF token endpoint and the file upload endpoint
CSRF_URL="http://127.0.0.1:8000/uploader/get-csrf-token/"
UPLOAD_URL="http://127.0.0.1:8000/uploader/upload/"

# Define the path to the ZIP file to be uploaded
ZIP_FILE_PATH="path/to/your/file.zip"

# Check if the zip file exists
if [[ ! -f "$ZIP_FILE_PATH" ]]; then
    echo "File not found: $ZIP_FILE_PATH"
    exit 1
fi

# Get CSRF token from the Django site
csrf_token=$(curl -s -c cookies.txt "$CSRF_URL" | grep csrf_token | sed -E 's/.*"csrf_token":"([^"]+)".*/\1/')

# Check if the csrf_token variable is empty
if [[ -z "$csrf_token" ]]; then
    echo "Failed to retrieve CSRF token."
    exit 1
fi

echo "CSRF token retrieved: $csrf_token"

# Use curl to post the zip file to the upload URL with the CSRF token
response=$(curl -s -b cookies.txt -c cookies.txt -w "\nHTTP_CODE:%{http_code}\n" -F "file=@$ZIP_FILE_PATH" -F "csrfmiddlewaretoken=$csrf_token" "$UPLOAD_URL")

# Extract the HTTP response code
http_code=$(echo "$response" | grep "HTTP_CODE" | cut -d':' -f2)

# Display the result based on the HTTP response code
if [[ "$http_code" == "200" ]]; then
    echo "Zip file uploaded successfully!"
else
    echo "Failed to upload zip file. HTTP response code: $http_code"
    echo "Response: $response"
fi
